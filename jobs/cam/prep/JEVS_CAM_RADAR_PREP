#!/bin/bash

# =============================================================================
#
# NAME: JEVS_CAM_PREP
# CONTRIBUTOR(S): Marcel Caron, marcel.caron@noaa.gov, NOAA/NWS/NCEP/EMC-VPPPGB
# PURPOSE: Use ECF environment variables to define and run an EVS job
# DEPENDENCIES: $HOMEevs/ecf/cam/prep/jevs_$MODELNAME_$VERIF_CASE_prep.ecf
#
# =============================================================================

########################################
# Preliminary data setup step
########################################
set -xa


####################################
# SET SHELL PROCESSING VARIABLES
####################################
export PS4='$SECONDS + '
date


###########################################################
# obtain unique LSF id (jobid) and make temp directories
###########################################################
export pid=$$
if [ $VERIF_CASE = precip ] ; then
  # LD: if statement not needed if DATAROOT is set upstream in ecf script.
  #     DATA and DATA_IN can also be combined as in else command below.

  # in production, the following will be set to DATAROOT
  #export DATA_IN=${DATA_IN:-$DATAROOT}
  export DATA_IN=${DATA_IN:-$DATAROOTtmp}
  export DATA=$DATA_IN/${jobid}
  rm -rf $DATA
else
  export DATA=${DATA:-${DATAROOT:?}/${jobid:?}}
fi
mkdir -p $DATA
cd $DATA



####################################
# Determine Job Output Name on System
####################################
export pgmout="OUTPUT.${pid}"


####################################
# Set EVS directories
####################################
export HOMEevs=${HOMEevs:-${PACKAGEROOT}/evs.${model_ver}}
export EXECevs=${EXECevs:-$HOMEevs/exec}
export FIXevs=${FIXevs:-$HOMEevs/fix}
export PARMevs=${PARMevs:-$HOMEevs/parm}
export USHevs=${USHevs:-$HOMEevs/ush}

# Really the only if statement for precip that needs to be kept
if [ $VERIF_CASE = precip ] ; then
  export MET_PLUS_CONF="${PARMevs}/metplus_config/cam/precip/stats"
fi


####################################
# Run setpdy and initialize PDY variables
####################################
export cycle=${cycle:-t${cyc}z}
setpdy.sh
. ./PDY

if [ $VERIF_CASE = precip ] ; then
  # LD: can use setpdy.sh instead to match convention of rest of EVS  
  export VDATE=$(date -d "today -1 day" +"%Y%m%d")
elif [ $VERIF_CASE = radar ] ; then
  export VDATE=$PDYm1
elif [ $VERIF_CASE = severe ] ; then
  export VDATE=TBD
fi


####################################
# Define NET/RUN variables
####################################
export NET=${NET:-evs}
export STEP=${STEP:-prep}
export COMPONENT=${COMPONENT:-cam}
export RUN=${RUN:-atmos}


####################################
# Define COMIN/COMOUT variables
####################################
export COMIN=${COMIN:-$(compath.py -o $NET/$evs_ver)}
export COMINccpa=${COMINccpa:-$(compath.py prod/ccpa/$ccpa_ver)}
if [ $VERIF_CASE = precip ] ; then
  # LD: This needs to change because I will be using data under mrms/conus directory.
  #     Modify downstream scripts to add alaska/MultiSensorQPE there
  export COMINmrms=$DCOMROOT/ldmdata/obs/upperair/mrms/alaska/MultiSensorQPE
else
  export COMINmrms=$DCOMROOT/ldmdata/obs/upperair/mrms
fi
export COMINnam=${COMINnam:-$(compath.py ${envir}/com/nam/${nam_ver})}
export COMINhiresw=${COMINhiresw:-$(compath.py ${envir}/com/hiresw/${hiresw_ver})}
export COMINhrrr=${COMINhrrr:-$(compath.py ${envir}/com/hrrr/${hrrr_ver})}

if [ $VERIF_CASE = precip ] ; then
  # LD: if statement not needed if COMOUT is set upstream in ecf script.
  export COMOUT=/lfs/h2/emc/ptmp/${USER}/EVS_out/com/$NET/$evs_ver/$STEP/$COMPONENT/$RUN
else
  export COMOUT=${COMOUT:-$(compath.py -o $NET/$evs_ver/$STEP/$COMPONENT/$RUN)}
fi

export COMOUTmrms=${COMOUT}/${OBSNAME}.${VDATE}
mkdir -m 755 -p $COMOUTmrms


####################################
# Execute the script 
####################################
#env
$HOMEevs/scripts/$COMPONENT/$STEP/exevs_${COMPONENT}_${VERIF_CASE}_${STEP}.sh
export err=$?; err_chk

cat $pgmout

msg="JOB $job HAS COMPLETED NORMALLY."
postmsg "$msg"

if [ "$KEEPDATA" != "YES" ] ; then
  if [ $VERIF_CASE = precip ] ; then
    cd $DATA_IN
  else
    cd $DATAROOT
  fi
  rm -rf $DATA
fi

date
